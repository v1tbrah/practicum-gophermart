// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"
	config "practicum-gophermart/internal/config"

	mock "github.com/stretchr/testify/mock"

	model "practicum-gophermart/internal/model"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// AddOrder provides a mock function with given fields: c, order
func (_m *Application) AddOrder(c context.Context, order *model.Order) error {
	ret := _m.Called(c, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Order) error); ok {
		r0 = rf(c, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseStorage provides a mock function with given fields:
func (_m *Application) CloseStorage() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Config provides a mock function with given fields:
func (_m *Application) Config() *config.Config {
	ret := _m.Called()

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	return r0
}

// CreateUser provides a mock function with given fields: c, user
func (_m *Application) CreateUser(c context.Context, user *model.User) (int64, error) {
	ret := _m.Called(c, user)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) int64); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(c, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalance provides a mock function with given fields: c, userID
func (_m *Application) GetBalance(c context.Context, userID int64) (float64, float64, error) {
	ret := _m.Called(c, userID)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, int64) float64); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 float64
	if rf, ok := ret.Get(1).(func(context.Context, int64) float64); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Get(1).(float64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(c, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrdersByStatuses provides a mock function with given fields: statuses
func (_m *Application) GetOrdersByStatuses(statuses []string) ([]model.Order, error) {
	ret := _m.Called(statuses)

	var r0 []model.Order
	if rf, ok := ret.Get(0).(func([]string) []model.Order); ok {
		r0 = rf(statuses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(statuses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByUser provides a mock function with given fields: c, userID
func (_m *Application) GetOrdersByUser(c context.Context, userID int64) ([]model.Order, error) {
	ret := _m.Called(c, userID)

	var r0 []model.Order
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Order); ok {
		r0 = rf(c, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefreshSessionByToken provides a mock function with given fields: c, refreshToken
func (_m *Application) GetRefreshSessionByToken(c context.Context, refreshToken string) (*model.RefreshSession, error) {
	ret := _m.Called(c, refreshToken)

	var r0 *model.RefreshSession
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.RefreshSession); ok {
		r0 = rf(c, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RefreshSession)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: c, login, pwd
func (_m *Application) GetUser(c context.Context, login string, pwd string) (*model.User, error) {
	ret := _m.Called(c, login, pwd)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = rf(c, login, pwd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, login, pwd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithdrawals provides a mock function with given fields: c, userID
func (_m *Application) GetWithdrawals(c context.Context, userID int64) ([]model.Withdraw, error) {
	ret := _m.Called(c, userID)

	var r0 []model.Withdraw
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Withdraw); ok {
		r0 = rf(c, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Withdraw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRefreshSession provides a mock function with given fields: c, newRefreshSession
func (_m *Application) NewRefreshSession(c context.Context, newRefreshSession *model.RefreshSession) error {
	ret := _m.Called(c, newRefreshSession)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RefreshSession) error); ok {
		r0 = rf(c, newRefreshSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderStatuses provides a mock function with given fields: newOrderStatuses
func (_m *Application) UpdateOrderStatuses(newOrderStatuses []model.Order) error {
	ret := _m.Called(newOrderStatuses)

	var r0 error
	if rf, ok := ret.Get(0).(func([]model.Order) error); ok {
		r0 = rf(newOrderStatuses)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawFromBalance provides a mock function with given fields: c, userID, withdraw
func (_m *Application) WithdrawFromBalance(c context.Context, userID int64, withdraw model.Withdraw) error {
	ret := _m.Called(c, userID, withdraw)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.Withdraw) error); ok {
		r0 = rf(c, userID, withdraw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewApplication interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplication(t mockConstructorTestingTNewApplication) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
